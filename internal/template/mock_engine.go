// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package template

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockEngine creates a new instance of MockEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngine(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockEngine {
	mock := &MockEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEngine is an autogenerated mock type for the Engine type
type MockEngine struct {
	mock.Mock
}

type MockEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEngine) EXPECT() *MockEngine_Expecter {
	return &MockEngine_Expecter{mock: &_m.Mock}
}

// ExtractVariables provides a mock function for the type MockEngine
func (_mock *MockEngine) ExtractVariables(template string) ([]string, error) {
	ret := _mock.Called(template)

	if len(ret) == 0 {
		panic("no return value specified for ExtractVariables")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return returnFunc(template)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(template)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(template)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngine_ExtractVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractVariables'
type MockEngine_ExtractVariables_Call struct {
	*mock.Call
}

// ExtractVariables is a helper method to define mock.On call
//   - template string
func (_e *MockEngine_Expecter) ExtractVariables(template interface{}) *MockEngine_ExtractVariables_Call {
	return &MockEngine_ExtractVariables_Call{Call: _e.mock.On("ExtractVariables", template)}
}

func (_c *MockEngine_ExtractVariables_Call) Run(run func(template string)) *MockEngine_ExtractVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEngine_ExtractVariables_Call) Return(strings []string, err error) *MockEngine_ExtractVariables_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockEngine_ExtractVariables_Call) RunAndReturn(run func(template string) ([]string, error)) *MockEngine_ExtractVariables_Call {
	_c.Call.Return(run)
	return _c
}

// ParseAndValidate provides a mock function for the type MockEngine
func (_mock *MockEngine) ParseAndValidate(template string) error {
	ret := _mock.Called(template)

	if len(ret) == 0 {
		panic("no return value specified for ParseAndValidate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(template)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEngine_ParseAndValidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseAndValidate'
type MockEngine_ParseAndValidate_Call struct {
	*mock.Call
}

// ParseAndValidate is a helper method to define mock.On call
//   - template string
func (_e *MockEngine_Expecter) ParseAndValidate(template interface{}) *MockEngine_ParseAndValidate_Call {
	return &MockEngine_ParseAndValidate_Call{Call: _e.mock.On("ParseAndValidate", template)}
}

func (_c *MockEngine_ParseAndValidate_Call) Run(run func(template string)) *MockEngine_ParseAndValidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEngine_ParseAndValidate_Call) Return(err error) *MockEngine_ParseAndValidate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEngine_ParseAndValidate_Call) RunAndReturn(run func(template string) error) *MockEngine_ParseAndValidate_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function for the type MockEngine
func (_mock *MockEngine) Render(template string, variables map[string]any) (string, error) {
	ret := _mock.Called(template, variables)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any) (string, error)); ok {
		return returnFunc(template, variables)
	}
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any) string); ok {
		r0 = returnFunc(template, variables)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, map[string]any) error); ok {
		r1 = returnFunc(template, variables)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngine_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type MockEngine_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - template string
//   - variables map[string]any
func (_e *MockEngine_Expecter) Render(template interface{}, variables interface{}) *MockEngine_Render_Call {
	return &MockEngine_Render_Call{Call: _e.mock.On("Render", template, variables)}
}

func (_c *MockEngine_Render_Call) Run(run func(template string, variables map[string]any)) *MockEngine_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngine_Render_Call) Return(s string, err error) *MockEngine_Render_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEngine_Render_Call) RunAndReturn(run func(template string, variables map[string]any) (string, error)) *MockEngine_Render_Call {
	_c.Call.Return(run)
	return _c
}
