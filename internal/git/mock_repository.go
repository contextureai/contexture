// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package git

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Clone provides a mock function for the type MockRepository
func (_mock *MockRepository) Clone(ctx context.Context, repoURL string, localPath string, opts ...CloneOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, repoURL, localPath, opts)
	} else {
		tmpRet = _mock.Called(ctx, repoURL, localPath)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...CloneOption) error); ok {
		r0 = returnFunc(ctx, repoURL, localPath, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type MockRepository_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
//   - ctx context.Context
//   - repoURL string
//   - localPath string
//   - opts ...CloneOption
func (_e *MockRepository_Expecter) Clone(ctx interface{}, repoURL interface{}, localPath interface{}, opts ...interface{}) *MockRepository_Clone_Call {
	return &MockRepository_Clone_Call{Call: _e.mock.On("Clone",
		append([]interface{}{ctx, repoURL, localPath}, opts...)...)}
}

func (_c *MockRepository_Clone_Call) Run(run func(ctx context.Context, repoURL string, localPath string, opts ...CloneOption)) *MockRepository_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []CloneOption
		var variadicArgs []CloneOption
		if len(args) > 3 {
			variadicArgs = args[3].([]CloneOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockRepository_Clone_Call) Return(err error) *MockRepository_Clone_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Clone_Call) RunAndReturn(run func(ctx context.Context, repoURL string, localPath string, opts ...CloneOption) error) *MockRepository_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommitInfoByHash provides a mock function for the type MockRepository
func (_mock *MockRepository) GetCommitInfoByHash(localPath string, commitHash string) (*CommitInfo, error) {
	ret := _mock.Called(localPath, commitHash)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitInfoByHash")
	}

	var r0 *CommitInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*CommitInfo, error)); ok {
		return returnFunc(localPath, commitHash)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *CommitInfo); ok {
		r0 = returnFunc(localPath, commitHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CommitInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(localPath, commitHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetCommitInfoByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitInfoByHash'
type MockRepository_GetCommitInfoByHash_Call struct {
	*mock.Call
}

// GetCommitInfoByHash is a helper method to define mock.On call
//   - localPath string
//   - commitHash string
func (_e *MockRepository_Expecter) GetCommitInfoByHash(localPath interface{}, commitHash interface{}) *MockRepository_GetCommitInfoByHash_Call {
	return &MockRepository_GetCommitInfoByHash_Call{Call: _e.mock.On("GetCommitInfoByHash", localPath, commitHash)}
}

func (_c *MockRepository_GetCommitInfoByHash_Call) Run(run func(localPath string, commitHash string)) *MockRepository_GetCommitInfoByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetCommitInfoByHash_Call) Return(commitInfo *CommitInfo, err error) *MockRepository_GetCommitInfoByHash_Call {
	_c.Call.Return(commitInfo, err)
	return _c
}

func (_c *MockRepository_GetCommitInfoByHash_Call) RunAndReturn(run func(localPath string, commitHash string) (*CommitInfo, error)) *MockRepository_GetCommitInfoByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileAtCommit provides a mock function for the type MockRepository
func (_mock *MockRepository) GetFileAtCommit(localPath string, filePath string, commitHash string) ([]byte, error) {
	ret := _mock.Called(localPath, filePath, commitHash)

	if len(ret) == 0 {
		panic("no return value specified for GetFileAtCommit")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) ([]byte, error)); ok {
		return returnFunc(localPath, filePath, commitHash)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) []byte); ok {
		r0 = returnFunc(localPath, filePath, commitHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = returnFunc(localPath, filePath, commitHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetFileAtCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileAtCommit'
type MockRepository_GetFileAtCommit_Call struct {
	*mock.Call
}

// GetFileAtCommit is a helper method to define mock.On call
//   - localPath string
//   - filePath string
//   - commitHash string
func (_e *MockRepository_Expecter) GetFileAtCommit(localPath interface{}, filePath interface{}, commitHash interface{}) *MockRepository_GetFileAtCommit_Call {
	return &MockRepository_GetFileAtCommit_Call{Call: _e.mock.On("GetFileAtCommit", localPath, filePath, commitHash)}
}

func (_c *MockRepository_GetFileAtCommit_Call) Run(run func(localPath string, filePath string, commitHash string)) *MockRepository_GetFileAtCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_GetFileAtCommit_Call) Return(bytes []byte, err error) *MockRepository_GetFileAtCommit_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockRepository_GetFileAtCommit_Call) RunAndReturn(run func(localPath string, filePath string, commitHash string) ([]byte, error)) *MockRepository_GetFileAtCommit_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileCommitInfo provides a mock function for the type MockRepository
func (_mock *MockRepository) GetFileCommitInfo(localPath string, filePath string, branch string) (*CommitInfo, error) {
	ret := _mock.Called(localPath, filePath, branch)

	if len(ret) == 0 {
		panic("no return value specified for GetFileCommitInfo")
	}

	var r0 *CommitInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) (*CommitInfo, error)); ok {
		return returnFunc(localPath, filePath, branch)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) *CommitInfo); ok {
		r0 = returnFunc(localPath, filePath, branch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CommitInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = returnFunc(localPath, filePath, branch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetFileCommitInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileCommitInfo'
type MockRepository_GetFileCommitInfo_Call struct {
	*mock.Call
}

// GetFileCommitInfo is a helper method to define mock.On call
//   - localPath string
//   - filePath string
//   - branch string
func (_e *MockRepository_Expecter) GetFileCommitInfo(localPath interface{}, filePath interface{}, branch interface{}) *MockRepository_GetFileCommitInfo_Call {
	return &MockRepository_GetFileCommitInfo_Call{Call: _e.mock.On("GetFileCommitInfo", localPath, filePath, branch)}
}

func (_c *MockRepository_GetFileCommitInfo_Call) Run(run func(localPath string, filePath string, branch string)) *MockRepository_GetFileCommitInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_GetFileCommitInfo_Call) Return(commitInfo *CommitInfo, err error) *MockRepository_GetFileCommitInfo_Call {
	_c.Call.Return(commitInfo, err)
	return _c
}

func (_c *MockRepository_GetFileCommitInfo_Call) RunAndReturn(run func(localPath string, filePath string, branch string) (*CommitInfo, error)) *MockRepository_GetFileCommitInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestCommitHash provides a mock function for the type MockRepository
func (_mock *MockRepository) GetLatestCommitHash(localPath string, branch string) (string, error) {
	ret := _mock.Called(localPath, branch)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCommitHash")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(localPath, branch)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(localPath, branch)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(localPath, branch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetLatestCommitHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestCommitHash'
type MockRepository_GetLatestCommitHash_Call struct {
	*mock.Call
}

// GetLatestCommitHash is a helper method to define mock.On call
//   - localPath string
//   - branch string
func (_e *MockRepository_Expecter) GetLatestCommitHash(localPath interface{}, branch interface{}) *MockRepository_GetLatestCommitHash_Call {
	return &MockRepository_GetLatestCommitHash_Call{Call: _e.mock.On("GetLatestCommitHash", localPath, branch)}
}

func (_c *MockRepository_GetLatestCommitHash_Call) Run(run func(localPath string, branch string)) *MockRepository_GetLatestCommitHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetLatestCommitHash_Call) Return(s string, err error) *MockRepository_GetLatestCommitHash_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockRepository_GetLatestCommitHash_Call) RunAndReturn(run func(localPath string, branch string) (string, error)) *MockRepository_GetLatestCommitHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteURL provides a mock function for the type MockRepository
func (_mock *MockRepository) GetRemoteURL(localPath string) (string, error) {
	ret := _mock.Called(localPath)

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(localPath)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(localPath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(localPath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetRemoteURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteURL'
type MockRepository_GetRemoteURL_Call struct {
	*mock.Call
}

// GetRemoteURL is a helper method to define mock.On call
//   - localPath string
func (_e *MockRepository_Expecter) GetRemoteURL(localPath interface{}) *MockRepository_GetRemoteURL_Call {
	return &MockRepository_GetRemoteURL_Call{Call: _e.mock.On("GetRemoteURL", localPath)}
}

func (_c *MockRepository_GetRemoteURL_Call) Run(run func(localPath string)) *MockRepository_GetRemoteURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_GetRemoteURL_Call) Return(s string, err error) *MockRepository_GetRemoteURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockRepository_GetRemoteURL_Call) RunAndReturn(run func(localPath string) (string, error)) *MockRepository_GetRemoteURL_Call {
	_c.Call.Return(run)
	return _c
}

// IsValidRepository provides a mock function for the type MockRepository
func (_mock *MockRepository) IsValidRepository(localPath string) bool {
	ret := _mock.Called(localPath)

	if len(ret) == 0 {
		panic("no return value specified for IsValidRepository")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(localPath)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockRepository_IsValidRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidRepository'
type MockRepository_IsValidRepository_Call struct {
	*mock.Call
}

// IsValidRepository is a helper method to define mock.On call
//   - localPath string
func (_e *MockRepository_Expecter) IsValidRepository(localPath interface{}) *MockRepository_IsValidRepository_Call {
	return &MockRepository_IsValidRepository_Call{Call: _e.mock.On("IsValidRepository", localPath)}
}

func (_c *MockRepository_IsValidRepository_Call) Run(run func(localPath string)) *MockRepository_IsValidRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_IsValidRepository_Call) Return(b bool) *MockRepository_IsValidRepository_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockRepository_IsValidRepository_Call) RunAndReturn(run func(localPath string) bool) *MockRepository_IsValidRepository_Call {
	_c.Call.Return(run)
	return _c
}

// Pull provides a mock function for the type MockRepository
func (_mock *MockRepository) Pull(ctx context.Context, localPath string, opts ...PullOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, localPath, opts)
	} else {
		tmpRet = _mock.Called(ctx, localPath)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...PullOption) error); ok {
		r0 = returnFunc(ctx, localPath, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type MockRepository_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - ctx context.Context
//   - localPath string
//   - opts ...PullOption
func (_e *MockRepository_Expecter) Pull(ctx interface{}, localPath interface{}, opts ...interface{}) *MockRepository_Pull_Call {
	return &MockRepository_Pull_Call{Call: _e.mock.On("Pull",
		append([]interface{}{ctx, localPath}, opts...)...)}
}

func (_c *MockRepository_Pull_Call) Run(run func(ctx context.Context, localPath string, opts ...PullOption)) *MockRepository_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []PullOption
		var variadicArgs []PullOption
		if len(args) > 2 {
			variadicArgs = args[2].([]PullOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockRepository_Pull_Call) Return(err error) *MockRepository_Pull_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Pull_Call) RunAndReturn(run func(ctx context.Context, localPath string, opts ...PullOption) error) *MockRepository_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateURL provides a mock function for the type MockRepository
func (_mock *MockRepository) ValidateURL(repoURL string) error {
	ret := _mock.Called(repoURL)

	if len(ret) == 0 {
		panic("no return value specified for ValidateURL")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(repoURL)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_ValidateURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateURL'
type MockRepository_ValidateURL_Call struct {
	*mock.Call
}

// ValidateURL is a helper method to define mock.On call
//   - repoURL string
func (_e *MockRepository_Expecter) ValidateURL(repoURL interface{}) *MockRepository_ValidateURL_Call {
	return &MockRepository_ValidateURL_Call{Call: _e.mock.On("ValidateURL", repoURL)}
}

func (_c *MockRepository_ValidateURL_Call) Run(run func(repoURL string)) *MockRepository_ValidateURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_ValidateURL_Call) Return(err error) *MockRepository_ValidateURL_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_ValidateURL_Call) RunAndReturn(run func(repoURL string) error) *MockRepository_ValidateURL_Call {
	_c.Call.Return(run)
	return _c
}
