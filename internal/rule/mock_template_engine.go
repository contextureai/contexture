// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package rule

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockTemplateEngine creates a new instance of MockTemplateEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplateEngine(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockTemplateEngine {
	mock := &MockTemplateEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTemplateEngine is an autogenerated mock type for the TemplateEngine type
type MockTemplateEngine struct {
	mock.Mock
}

type MockTemplateEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplateEngine) EXPECT() *MockTemplateEngine_Expecter {
	return &MockTemplateEngine_Expecter{mock: &_m.Mock}
}

// ExtractVariables provides a mock function for the type MockTemplateEngine
func (_mock *MockTemplateEngine) ExtractVariables(template string) ([]string, error) {
	ret := _mock.Called(template)

	if len(ret) == 0 {
		panic("no return value specified for ExtractVariables")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return returnFunc(template)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(template)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(template)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplateEngine_ExtractVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractVariables'
type MockTemplateEngine_ExtractVariables_Call struct {
	*mock.Call
}

// ExtractVariables is a helper method to define mock.On call
//   - template string
func (_e *MockTemplateEngine_Expecter) ExtractVariables(template interface{}) *MockTemplateEngine_ExtractVariables_Call {
	return &MockTemplateEngine_ExtractVariables_Call{Call: _e.mock.On("ExtractVariables", template)}
}

func (_c *MockTemplateEngine_ExtractVariables_Call) Run(run func(template string)) *MockTemplateEngine_ExtractVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTemplateEngine_ExtractVariables_Call) Return(strings []string, err error) *MockTemplateEngine_ExtractVariables_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockTemplateEngine_ExtractVariables_Call) RunAndReturn(run func(template string) ([]string, error)) *MockTemplateEngine_ExtractVariables_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessTemplate provides a mock function for the type MockTemplateEngine
func (_mock *MockTemplateEngine) ProcessTemplate(content string, variables map[string]any) (string, error) {
	ret := _mock.Called(content, variables)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTemplate")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any) (string, error)); ok {
		return returnFunc(content, variables)
	}
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any) string); ok {
		r0 = returnFunc(content, variables)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, map[string]any) error); ok {
		r1 = returnFunc(content, variables)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplateEngine_ProcessTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTemplate'
type MockTemplateEngine_ProcessTemplate_Call struct {
	*mock.Call
}

// ProcessTemplate is a helper method to define mock.On call
//   - content string
//   - variables map[string]any
func (_e *MockTemplateEngine_Expecter) ProcessTemplate(content interface{}, variables interface{}) *MockTemplateEngine_ProcessTemplate_Call {
	return &MockTemplateEngine_ProcessTemplate_Call{Call: _e.mock.On("ProcessTemplate", content, variables)}
}

func (_c *MockTemplateEngine_ProcessTemplate_Call) Run(run func(content string, variables map[string]any)) *MockTemplateEngine_ProcessTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTemplateEngine_ProcessTemplate_Call) Return(s string, err error) *MockTemplateEngine_ProcessTemplate_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTemplateEngine_ProcessTemplate_Call) RunAndReturn(run func(content string, variables map[string]any) (string, error)) *MockTemplateEngine_ProcessTemplate_Call {
	_c.Call.Return(run)
	return _c
}
