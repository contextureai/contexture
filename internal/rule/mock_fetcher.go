// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package rule

import (
	"context"

	"github.com/contextureai/contexture/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFetcher creates a new instance of MockFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFetcher(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockFetcher {
	mock := &MockFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFetcher is an autogenerated mock type for the Fetcher type
type MockFetcher struct {
	mock.Mock
}

type MockFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFetcher) EXPECT() *MockFetcher_Expecter {
	return &MockFetcher_Expecter{mock: &_m.Mock}
}

// FetchRule provides a mock function for the type MockFetcher
func (_mock *MockFetcher) FetchRule(ctx context.Context, ruleID string) (*domain.Rule, error) {
	ret := _mock.Called(ctx, ruleID)

	if len(ret) == 0 {
		panic("no return value specified for FetchRule")
	}

	var r0 *domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Rule, error)); ok {
		return returnFunc(ctx, ruleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Rule); ok {
		r0 = returnFunc(ctx, ruleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, ruleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFetcher_FetchRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRule'
type MockFetcher_FetchRule_Call struct {
	*mock.Call
}

// FetchRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleID string
func (_e *MockFetcher_Expecter) FetchRule(ctx interface{}, ruleID interface{}) *MockFetcher_FetchRule_Call {
	return &MockFetcher_FetchRule_Call{Call: _e.mock.On("FetchRule", ctx, ruleID)}
}

func (_c *MockFetcher_FetchRule_Call) Run(run func(ctx context.Context, ruleID string)) *MockFetcher_FetchRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFetcher_FetchRule_Call) Return(rule *domain.Rule, err error) *MockFetcher_FetchRule_Call {
	_c.Call.Return(rule, err)
	return _c
}

func (_c *MockFetcher_FetchRule_Call) RunAndReturn(run func(ctx context.Context, ruleID string) (*domain.Rule, error)) *MockFetcher_FetchRule_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRules provides a mock function for the type MockFetcher
func (_mock *MockFetcher) FetchRules(ctx context.Context, ruleIDs []string) ([]*domain.Rule, error) {
	ret := _mock.Called(ctx, ruleIDs)

	if len(ret) == 0 {
		panic("no return value specified for FetchRules")
	}

	var r0 []*domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]*domain.Rule, error)); ok {
		return returnFunc(ctx, ruleIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []*domain.Rule); ok {
		r0 = returnFunc(ctx, ruleIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, ruleIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFetcher_FetchRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRules'
type MockFetcher_FetchRules_Call struct {
	*mock.Call
}

// FetchRules is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleIDs []string
func (_e *MockFetcher_Expecter) FetchRules(ctx interface{}, ruleIDs interface{}) *MockFetcher_FetchRules_Call {
	return &MockFetcher_FetchRules_Call{Call: _e.mock.On("FetchRules", ctx, ruleIDs)}
}

func (_c *MockFetcher_FetchRules_Call) Run(run func(ctx context.Context, ruleIDs []string)) *MockFetcher_FetchRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFetcher_FetchRules_Call) Return(rules []*domain.Rule, err error) *MockFetcher_FetchRules_Call {
	_c.Call.Return(rules, err)
	return _c
}

func (_c *MockFetcher_FetchRules_Call) RunAndReturn(run func(ctx context.Context, ruleIDs []string) ([]*domain.Rule, error)) *MockFetcher_FetchRules_Call {
	_c.Call.Return(run)
	return _c
}

// ListAvailableRules provides a mock function for the type MockFetcher
func (_mock *MockFetcher) ListAvailableRules(ctx context.Context, source string, ref string) ([]string, error) {
	ret := _mock.Called(ctx, source, ref)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableRules")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]string, error)); ok {
		return returnFunc(ctx, source, ref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = returnFunc(ctx, source, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, source, ref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFetcher_ListAvailableRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAvailableRules'
type MockFetcher_ListAvailableRules_Call struct {
	*mock.Call
}

// ListAvailableRules is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - ref string
func (_e *MockFetcher_Expecter) ListAvailableRules(ctx interface{}, source interface{}, ref interface{}) *MockFetcher_ListAvailableRules_Call {
	return &MockFetcher_ListAvailableRules_Call{Call: _e.mock.On("ListAvailableRules", ctx, source, ref)}
}

func (_c *MockFetcher_ListAvailableRules_Call) Run(run func(ctx context.Context, source string, ref string)) *MockFetcher_ListAvailableRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFetcher_ListAvailableRules_Call) Return(strings []string, err error) *MockFetcher_ListAvailableRules_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockFetcher_ListAvailableRules_Call) RunAndReturn(run func(ctx context.Context, source string, ref string) ([]string, error)) *MockFetcher_ListAvailableRules_Call {
	_c.Call.Return(run)
	return _c
}

// ListAvailableRulesWithStructure provides a mock function for the type MockFetcher
func (_mock *MockFetcher) ListAvailableRulesWithStructure(ctx context.Context, source string, ref string) (*domain.RuleNode, error) {
	ret := _mock.Called(ctx, source, ref)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableRulesWithStructure")
	}

	var r0 *domain.RuleNode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.RuleNode, error)); ok {
		return returnFunc(ctx, source, ref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.RuleNode); ok {
		r0 = returnFunc(ctx, source, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RuleNode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, source, ref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFetcher_ListAvailableRulesWithStructure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAvailableRulesWithStructure'
type MockFetcher_ListAvailableRulesWithStructure_Call struct {
	*mock.Call
}

// ListAvailableRulesWithStructure is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - ref string
func (_e *MockFetcher_Expecter) ListAvailableRulesWithStructure(ctx interface{}, source interface{}, ref interface{}) *MockFetcher_ListAvailableRulesWithStructure_Call {
	return &MockFetcher_ListAvailableRulesWithStructure_Call{Call: _e.mock.On("ListAvailableRulesWithStructure", ctx, source, ref)}
}

func (_c *MockFetcher_ListAvailableRulesWithStructure_Call) Run(run func(ctx context.Context, source string, ref string)) *MockFetcher_ListAvailableRulesWithStructure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFetcher_ListAvailableRulesWithStructure_Call) Return(ruleNode *domain.RuleNode, err error) *MockFetcher_ListAvailableRulesWithStructure_Call {
	_c.Call.Return(ruleNode, err)
	return _c
}

func (_c *MockFetcher_ListAvailableRulesWithStructure_Call) RunAndReturn(run func(ctx context.Context, source string, ref string) (*domain.RuleNode, error)) *MockFetcher_ListAvailableRulesWithStructure_Call {
	_c.Call.Return(run)
	return _c
}

// ParseRuleID provides a mock function for the type MockFetcher
func (_mock *MockFetcher) ParseRuleID(ruleID string) (*domain.ParsedRuleID, error) {
	ret := _mock.Called(ruleID)

	if len(ret) == 0 {
		panic("no return value specified for ParseRuleID")
	}

	var r0 *domain.ParsedRuleID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.ParsedRuleID, error)); ok {
		return returnFunc(ruleID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.ParsedRuleID); ok {
		r0 = returnFunc(ruleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ParsedRuleID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(ruleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFetcher_ParseRuleID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseRuleID'
type MockFetcher_ParseRuleID_Call struct {
	*mock.Call
}

// ParseRuleID is a helper method to define mock.On call
//   - ruleID string
func (_e *MockFetcher_Expecter) ParseRuleID(ruleID interface{}) *MockFetcher_ParseRuleID_Call {
	return &MockFetcher_ParseRuleID_Call{Call: _e.mock.On("ParseRuleID", ruleID)}
}

func (_c *MockFetcher_ParseRuleID_Call) Run(run func(ruleID string)) *MockFetcher_ParseRuleID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFetcher_ParseRuleID_Call) Return(parsedRuleID *domain.ParsedRuleID, err error) *MockFetcher_ParseRuleID_Call {
	_c.Call.Return(parsedRuleID, err)
	return _c
}

func (_c *MockFetcher_ParseRuleID_Call) RunAndReturn(run func(ruleID string) (*domain.ParsedRuleID, error)) *MockFetcher_ParseRuleID_Call {
	_c.Call.Return(run)
	return _c
}
