// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package rule

import (
	"github.com/contextureai/contexture/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockParser creates a new instance of MockParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParser(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockParser {
	mock := &MockParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

type MockParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParser) EXPECT() *MockParser_Expecter {
	return &MockParser_Expecter{mock: &_m.Mock}
}

// ParseContent provides a mock function for the type MockParser
func (_mock *MockParser) ParseContent(content string) (map[string]any, string, error) {
	ret := _mock.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for ParseContent")
	}

	var r0 map[string]any
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (map[string]any, string, error)); ok {
		return returnFunc(content)
	}
	if returnFunc, ok := ret.Get(0).(func(string) map[string]any); ok {
		r0 = returnFunc(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) string); ok {
		r1 = returnFunc(content)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(content)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockParser_ParseContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseContent'
type MockParser_ParseContent_Call struct {
	*mock.Call
}

// ParseContent is a helper method to define mock.On call
//   - content string
func (_e *MockParser_Expecter) ParseContent(content interface{}) *MockParser_ParseContent_Call {
	return &MockParser_ParseContent_Call{Call: _e.mock.On("ParseContent", content)}
}

func (_c *MockParser_ParseContent_Call) Run(run func(content string)) *MockParser_ParseContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockParser_ParseContent_Call) Return(frontmatter map[string]any, body string, err error) *MockParser_ParseContent_Call {
	_c.Call.Return(frontmatter, body, err)
	return _c
}

func (_c *MockParser_ParseContent_Call) RunAndReturn(run func(content string) (map[string]any, string, error)) *MockParser_ParseContent_Call {
	_c.Call.Return(run)
	return _c
}

// ParseRule provides a mock function for the type MockParser
func (_mock *MockParser) ParseRule(content string, metadata Metadata) (*domain.Rule, error) {
	ret := _mock.Called(content, metadata)

	if len(ret) == 0 {
		panic("no return value specified for ParseRule")
	}

	var r0 *domain.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, Metadata) (*domain.Rule, error)); ok {
		return returnFunc(content, metadata)
	}
	if returnFunc, ok := ret.Get(0).(func(string, Metadata) *domain.Rule); ok {
		r0 = returnFunc(content, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, Metadata) error); ok {
		r1 = returnFunc(content, metadata)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockParser_ParseRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseRule'
type MockParser_ParseRule_Call struct {
	*mock.Call
}

// ParseRule is a helper method to define mock.On call
//   - content string
//   - metadata Metadata
func (_e *MockParser_Expecter) ParseRule(content interface{}, metadata interface{}) *MockParser_ParseRule_Call {
	return &MockParser_ParseRule_Call{Call: _e.mock.On("ParseRule", content, metadata)}
}

func (_c *MockParser_ParseRule_Call) Run(run func(content string, metadata Metadata)) *MockParser_ParseRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 Metadata
		if args[1] != nil {
			arg1 = args[1].(Metadata)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockParser_ParseRule_Call) Return(rule *domain.Rule, err error) *MockParser_ParseRule_Call {
	_c.Call.Return(rule, err)
	return _c
}

func (_c *MockParser_ParseRule_Call) RunAndReturn(run func(content string, metadata Metadata) (*domain.Rule, error)) *MockParser_ParseRule_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRule provides a mock function for the type MockParser
func (_mock *MockParser) ValidateRule(rule *domain.Rule) error {
	ret := _mock.Called(rule)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRule")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Rule) error); ok {
		r0 = returnFunc(rule)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockParser_ValidateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRule'
type MockParser_ValidateRule_Call struct {
	*mock.Call
}

// ValidateRule is a helper method to define mock.On call
//   - rule *domain.Rule
func (_e *MockParser_Expecter) ValidateRule(rule interface{}) *MockParser_ValidateRule_Call {
	return &MockParser_ValidateRule_Call{Call: _e.mock.On("ValidateRule", rule)}
}

func (_c *MockParser_ValidateRule_Call) Run(run func(rule *domain.Rule)) *MockParser_ValidateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Rule
		if args[0] != nil {
			arg0 = args[0].(*domain.Rule)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockParser_ValidateRule_Call) Return(err error) *MockParser_ValidateRule_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockParser_ValidateRule_Call) RunAndReturn(run func(rule *domain.Rule) error) *MockParser_ValidateRule_Call {
	_c.Call.Return(run)
	return _c
}
