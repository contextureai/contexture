// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package rule

import (
	"github.com/contextureai/contexture/internal/domain"
	"github.com/contextureai/contexture/internal/validation"
	mock "github.com/stretchr/testify/mock"
)

// NewMockValidator creates a new instance of MockValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidator(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockValidator {
	mock := &MockValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockValidator is an autogenerated mock type for the Validator type
type MockValidator struct {
	mock.Mock
}

type MockValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValidator) EXPECT() *MockValidator_Expecter {
	return &MockValidator_Expecter{mock: &_m.Mock}
}

// ValidateGitURL provides a mock function for the type MockValidator
func (_mock *MockValidator) ValidateGitURL(gitURL string) error {
	ret := _mock.Called(gitURL)

	if len(ret) == 0 {
		panic("no return value specified for ValidateGitURL")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(gitURL)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValidator_ValidateGitURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateGitURL'
type MockValidator_ValidateGitURL_Call struct {
	*mock.Call
}

// ValidateGitURL is a helper method to define mock.On call
//   - gitURL string
func (_e *MockValidator_Expecter) ValidateGitURL(gitURL interface{}) *MockValidator_ValidateGitURL_Call {
	return &MockValidator_ValidateGitURL_Call{Call: _e.mock.On("ValidateGitURL", gitURL)}
}

func (_c *MockValidator_ValidateGitURL_Call) Run(run func(gitURL string)) *MockValidator_ValidateGitURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockValidator_ValidateGitURL_Call) Return(err error) *MockValidator_ValidateGitURL_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValidator_ValidateGitURL_Call) RunAndReturn(run func(gitURL string) error) *MockValidator_ValidateGitURL_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRule provides a mock function for the type MockValidator
func (_mock *MockValidator) ValidateRule(rule *domain.Rule) *domain.ValidationResult {
	ret := _mock.Called(rule)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRule")
	}

	var r0 *domain.ValidationResult
	if returnFunc, ok := ret.Get(0).(func(*domain.Rule) *domain.ValidationResult); ok {
		r0 = returnFunc(rule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ValidationResult)
		}
	}
	return r0
}

// MockValidator_ValidateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRule'
type MockValidator_ValidateRule_Call struct {
	*mock.Call
}

// ValidateRule is a helper method to define mock.On call
//   - rule *domain.Rule
func (_e *MockValidator_Expecter) ValidateRule(rule interface{}) *MockValidator_ValidateRule_Call {
	return &MockValidator_ValidateRule_Call{Call: _e.mock.On("ValidateRule", rule)}
}

func (_c *MockValidator_ValidateRule_Call) Run(run func(rule *domain.Rule)) *MockValidator_ValidateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Rule
		if args[0] != nil {
			arg0 = args[0].(*domain.Rule)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockValidator_ValidateRule_Call) Return(validationResult *domain.ValidationResult) *MockValidator_ValidateRule_Call {
	_c.Call.Return(validationResult)
	return _c
}

func (_c *MockValidator_ValidateRule_Call) RunAndReturn(run func(rule *domain.Rule) *domain.ValidationResult) *MockValidator_ValidateRule_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRuleContent provides a mock function for the type MockValidator
func (_mock *MockValidator) ValidateRuleContent(content string) *domain.ValidationResult {
	ret := _mock.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRuleContent")
	}

	var r0 *domain.ValidationResult
	if returnFunc, ok := ret.Get(0).(func(string) *domain.ValidationResult); ok {
		r0 = returnFunc(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ValidationResult)
		}
	}
	return r0
}

// MockValidator_ValidateRuleContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRuleContent'
type MockValidator_ValidateRuleContent_Call struct {
	*mock.Call
}

// ValidateRuleContent is a helper method to define mock.On call
//   - content string
func (_e *MockValidator_Expecter) ValidateRuleContent(content interface{}) *MockValidator_ValidateRuleContent_Call {
	return &MockValidator_ValidateRuleContent_Call{Call: _e.mock.On("ValidateRuleContent", content)}
}

func (_c *MockValidator_ValidateRuleContent_Call) Run(run func(content string)) *MockValidator_ValidateRuleContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockValidator_ValidateRuleContent_Call) Return(validationResult *domain.ValidationResult) *MockValidator_ValidateRuleContent_Call {
	_c.Call.Return(validationResult)
	return _c
}

func (_c *MockValidator_ValidateRuleContent_Call) RunAndReturn(run func(content string) *domain.ValidationResult) *MockValidator_ValidateRuleContent_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRuleID provides a mock function for the type MockValidator
func (_mock *MockValidator) ValidateRuleID(ruleID string) error {
	ret := _mock.Called(ruleID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRuleID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(ruleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValidator_ValidateRuleID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRuleID'
type MockValidator_ValidateRuleID_Call struct {
	*mock.Call
}

// ValidateRuleID is a helper method to define mock.On call
//   - ruleID string
func (_e *MockValidator_Expecter) ValidateRuleID(ruleID interface{}) *MockValidator_ValidateRuleID_Call {
	return &MockValidator_ValidateRuleID_Call{Call: _e.mock.On("ValidateRuleID", ruleID)}
}

func (_c *MockValidator_ValidateRuleID_Call) Run(run func(ruleID string)) *MockValidator_ValidateRuleID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockValidator_ValidateRuleID_Call) Return(err error) *MockValidator_ValidateRuleID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValidator_ValidateRuleID_Call) RunAndReturn(run func(ruleID string) error) *MockValidator_ValidateRuleID_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRules provides a mock function for the type MockValidator
func (_mock *MockValidator) ValidateRules(rules []*domain.Rule) *validation.BatchResult {
	ret := _mock.Called(rules)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRules")
	}

	var r0 *validation.BatchResult
	if returnFunc, ok := ret.Get(0).(func([]*domain.Rule) *validation.BatchResult); ok {
		r0 = returnFunc(rules)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validation.BatchResult)
		}
	}
	return r0
}

// MockValidator_ValidateRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRules'
type MockValidator_ValidateRules_Call struct {
	*mock.Call
}

// ValidateRules is a helper method to define mock.On call
//   - rules []*domain.Rule
func (_e *MockValidator_Expecter) ValidateRules(rules interface{}) *MockValidator_ValidateRules_Call {
	return &MockValidator_ValidateRules_Call{Call: _e.mock.On("ValidateRules", rules)}
}

func (_c *MockValidator_ValidateRules_Call) Run(run func(rules []*domain.Rule)) *MockValidator_ValidateRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []*domain.Rule
		if args[0] != nil {
			arg0 = args[0].([]*domain.Rule)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockValidator_ValidateRules_Call) Return(batchResult *validation.BatchResult) *MockValidator_ValidateRules_Call {
	_c.Call.Return(batchResult)
	return _c
}

func (_c *MockValidator_ValidateRules_Call) RunAndReturn(run func(rules []*domain.Rule) *validation.BatchResult) *MockValidator_ValidateRules_Call {
	_c.Call.Return(run)
	return _c
}
