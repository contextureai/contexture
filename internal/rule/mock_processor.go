// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package rule

import (
	"context"

	"github.com/contextureai/contexture/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProcessor creates a new instance of MockProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessor(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockProcessor {
	mock := &MockProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProcessor is an autogenerated mock type for the Processor type
type MockProcessor struct {
	mock.Mock
}

type MockProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessor) EXPECT() *MockProcessor_Expecter {
	return &MockProcessor_Expecter{mock: &_m.Mock}
}

// GenerateAttribution provides a mock function for the type MockProcessor
func (_mock *MockProcessor) GenerateAttribution(rule *domain.Rule) string {
	ret := _mock.Called(rule)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAttribution")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(*domain.Rule) string); ok {
		r0 = returnFunc(rule)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockProcessor_GenerateAttribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAttribution'
type MockProcessor_GenerateAttribution_Call struct {
	*mock.Call
}

// GenerateAttribution is a helper method to define mock.On call
//   - rule *domain.Rule
func (_e *MockProcessor_Expecter) GenerateAttribution(rule interface{}) *MockProcessor_GenerateAttribution_Call {
	return &MockProcessor_GenerateAttribution_Call{Call: _e.mock.On("GenerateAttribution", rule)}
}

func (_c *MockProcessor_GenerateAttribution_Call) Run(run func(rule *domain.Rule)) *MockProcessor_GenerateAttribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Rule
		if args[0] != nil {
			arg0 = args[0].(*domain.Rule)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProcessor_GenerateAttribution_Call) Return(s string) *MockProcessor_GenerateAttribution_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockProcessor_GenerateAttribution_Call) RunAndReturn(run func(rule *domain.Rule) string) *MockProcessor_GenerateAttribution_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessRule provides a mock function for the type MockProcessor
func (_mock *MockProcessor) ProcessRule(rule *domain.Rule, context *domain.RuleContext) (*domain.ProcessedRule, error) {
	ret := _mock.Called(rule, context)

	if len(ret) == 0 {
		panic("no return value specified for ProcessRule")
	}

	var r0 *domain.ProcessedRule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Rule, *domain.RuleContext) (*domain.ProcessedRule, error)); ok {
		return returnFunc(rule, context)
	}
	if returnFunc, ok := ret.Get(0).(func(*domain.Rule, *domain.RuleContext) *domain.ProcessedRule); ok {
		r0 = returnFunc(rule, context)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProcessedRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*domain.Rule, *domain.RuleContext) error); ok {
		r1 = returnFunc(rule, context)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProcessor_ProcessRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessRule'
type MockProcessor_ProcessRule_Call struct {
	*mock.Call
}

// ProcessRule is a helper method to define mock.On call
//   - rule *domain.Rule
//   - context *domain.RuleContext
func (_e *MockProcessor_Expecter) ProcessRule(rule interface{}, context interface{}) *MockProcessor_ProcessRule_Call {
	return &MockProcessor_ProcessRule_Call{Call: _e.mock.On("ProcessRule", rule, context)}
}

func (_c *MockProcessor_ProcessRule_Call) Run(run func(rule *domain.Rule, context *domain.RuleContext)) *MockProcessor_ProcessRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Rule
		if args[0] != nil {
			arg0 = args[0].(*domain.Rule)
		}
		var arg1 *domain.RuleContext
		if args[1] != nil {
			arg1 = args[1].(*domain.RuleContext)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProcessor_ProcessRule_Call) Return(processedRule *domain.ProcessedRule, err error) *MockProcessor_ProcessRule_Call {
	_c.Call.Return(processedRule, err)
	return _c
}

func (_c *MockProcessor_ProcessRule_Call) RunAndReturn(run func(rule *domain.Rule, context *domain.RuleContext) (*domain.ProcessedRule, error)) *MockProcessor_ProcessRule_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessRules provides a mock function for the type MockProcessor
func (_mock *MockProcessor) ProcessRules(rules []*domain.Rule, context *domain.RuleContext) ([]*domain.ProcessedRule, error) {
	ret := _mock.Called(rules, context)

	if len(ret) == 0 {
		panic("no return value specified for ProcessRules")
	}

	var r0 []*domain.ProcessedRule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]*domain.Rule, *domain.RuleContext) ([]*domain.ProcessedRule, error)); ok {
		return returnFunc(rules, context)
	}
	if returnFunc, ok := ret.Get(0).(func([]*domain.Rule, *domain.RuleContext) []*domain.ProcessedRule); ok {
		r0 = returnFunc(rules, context)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ProcessedRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]*domain.Rule, *domain.RuleContext) error); ok {
		r1 = returnFunc(rules, context)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProcessor_ProcessRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessRules'
type MockProcessor_ProcessRules_Call struct {
	*mock.Call
}

// ProcessRules is a helper method to define mock.On call
//   - rules []*domain.Rule
//   - context *domain.RuleContext
func (_e *MockProcessor_Expecter) ProcessRules(rules interface{}, context interface{}) *MockProcessor_ProcessRules_Call {
	return &MockProcessor_ProcessRules_Call{Call: _e.mock.On("ProcessRules", rules, context)}
}

func (_c *MockProcessor_ProcessRules_Call) Run(run func(rules []*domain.Rule, context *domain.RuleContext)) *MockProcessor_ProcessRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []*domain.Rule
		if args[0] != nil {
			arg0 = args[0].([]*domain.Rule)
		}
		var arg1 *domain.RuleContext
		if args[1] != nil {
			arg1 = args[1].(*domain.RuleContext)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProcessor_ProcessRules_Call) Return(processedRules []*domain.ProcessedRule, err error) *MockProcessor_ProcessRules_Call {
	_c.Call.Return(processedRules, err)
	return _c
}

func (_c *MockProcessor_ProcessRules_Call) RunAndReturn(run func(rules []*domain.Rule, context *domain.RuleContext) ([]*domain.ProcessedRule, error)) *MockProcessor_ProcessRules_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessRulesWithContext provides a mock function for the type MockProcessor
func (_mock *MockProcessor) ProcessRulesWithContext(ctx context.Context, rules []*domain.Rule, context1 *domain.RuleContext) ([]*domain.ProcessedRule, error) {
	ret := _mock.Called(ctx, rules, context1)

	if len(ret) == 0 {
		panic("no return value specified for ProcessRulesWithContext")
	}

	var r0 []*domain.ProcessedRule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*domain.Rule, *domain.RuleContext) ([]*domain.ProcessedRule, error)); ok {
		return returnFunc(ctx, rules, context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*domain.Rule, *domain.RuleContext) []*domain.ProcessedRule); ok {
		r0 = returnFunc(ctx, rules, context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ProcessedRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*domain.Rule, *domain.RuleContext) error); ok {
		r1 = returnFunc(ctx, rules, context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProcessor_ProcessRulesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessRulesWithContext'
type MockProcessor_ProcessRulesWithContext_Call struct {
	*mock.Call
}

// ProcessRulesWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - rules []*domain.Rule
//   - context1 *domain.RuleContext
func (_e *MockProcessor_Expecter) ProcessRulesWithContext(ctx interface{}, rules interface{}, context1 interface{}) *MockProcessor_ProcessRulesWithContext_Call {
	return &MockProcessor_ProcessRulesWithContext_Call{Call: _e.mock.On("ProcessRulesWithContext", ctx, rules, context1)}
}

func (_c *MockProcessor_ProcessRulesWithContext_Call) Run(run func(ctx context.Context, rules []*domain.Rule, context1 *domain.RuleContext)) *MockProcessor_ProcessRulesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*domain.Rule
		if args[1] != nil {
			arg1 = args[1].([]*domain.Rule)
		}
		var arg2 *domain.RuleContext
		if args[2] != nil {
			arg2 = args[2].(*domain.RuleContext)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProcessor_ProcessRulesWithContext_Call) Return(processedRules []*domain.ProcessedRule, err error) *MockProcessor_ProcessRulesWithContext_Call {
	_c.Call.Return(processedRules, err)
	return _c
}

func (_c *MockProcessor_ProcessRulesWithContext_Call) RunAndReturn(run func(ctx context.Context, rules []*domain.Rule, context1 *domain.RuleContext) ([]*domain.ProcessedRule, error)) *MockProcessor_ProcessRulesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessTemplate provides a mock function for the type MockProcessor
func (_mock *MockProcessor) ProcessTemplate(content string, variables map[string]any) (string, error) {
	ret := _mock.Called(content, variables)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTemplate")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any) (string, error)); ok {
		return returnFunc(content, variables)
	}
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any) string); ok {
		r0 = returnFunc(content, variables)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, map[string]any) error); ok {
		r1 = returnFunc(content, variables)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProcessor_ProcessTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTemplate'
type MockProcessor_ProcessTemplate_Call struct {
	*mock.Call
}

// ProcessTemplate is a helper method to define mock.On call
//   - content string
//   - variables map[string]any
func (_e *MockProcessor_Expecter) ProcessTemplate(content interface{}, variables interface{}) *MockProcessor_ProcessTemplate_Call {
	return &MockProcessor_ProcessTemplate_Call{Call: _e.mock.On("ProcessTemplate", content, variables)}
}

func (_c *MockProcessor_ProcessTemplate_Call) Run(run func(content string, variables map[string]any)) *MockProcessor_ProcessTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProcessor_ProcessTemplate_Call) Return(s string, err error) *MockProcessor_ProcessTemplate_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockProcessor_ProcessTemplate_Call) RunAndReturn(run func(content string, variables map[string]any) (string, error)) *MockProcessor_ProcessTemplate_Call {
	_c.Call.Return(run)
	return _c
}
