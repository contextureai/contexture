package rule

import (
	"fmt"
	"strings"

	"github.com/contextureai/contexture/internal/domain"
)

// AttributionGenerator defines the interface for generating attribution text for rules.
// Implementations create formatted text that identifies the rule's origin and metadata,
// which can be embedded in generated output files.
type AttributionGenerator interface {
	GenerateAttribution(rule *domain.Rule) string
}

// DefaultAttributionGenerator is the default implementation of AttributionGenerator
// that creates simple, formatted attribution text combining rule ID and source information.
// The generated text follows the pattern: "Generated by Contexture | Rule: <id> | Source: <source>".
type DefaultAttributionGenerator struct{}

// NewAttributionGenerator creates a new attribution generator.
// Returns a DefaultAttributionGenerator that produces formatted attribution text
// for embedding in generated rule output files.
func NewAttributionGenerator() AttributionGenerator {
	return &DefaultAttributionGenerator{}
}

// GenerateAttribution generates attribution text for a rule
func (ag *DefaultAttributionGenerator) GenerateAttribution(rule *domain.Rule) string {
	parts := []string{"Generated by Contexture"}

	if rule.ID != "" {
		parts = append(parts, fmt.Sprintf("Rule: %s", rule.ID))
	}

	if rule.Source != "" && rule.Source != "contexture" {
		parts = append(parts, fmt.Sprintf("Source: %s", rule.Source))
	}

	return strings.Join(parts, " | ")
}
