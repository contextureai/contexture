package rule

import (
	"fmt"
	"strings"

	"github.com/contextureai/contexture/internal/domain"
)

// AttributionGenerator handles attribution text generation
type AttributionGenerator interface {
	GenerateAttribution(rule *domain.Rule) string
}

// DefaultAttributionGenerator implements attribution generation
type DefaultAttributionGenerator struct{}

// NewAttributionGenerator creates a new attribution generator
func NewAttributionGenerator() AttributionGenerator {
	return &DefaultAttributionGenerator{}
}

// GenerateAttribution generates attribution text for a rule
func (ag *DefaultAttributionGenerator) GenerateAttribution(rule *domain.Rule) string {
	parts := []string{"Generated by Contexture"}

	if rule.ID != "" {
		parts = append(parts, fmt.Sprintf("Rule: %s", rule.ID))
	}

	if rule.Source != "" && rule.Source != "contexture" {
		parts = append(parts, fmt.Sprintf("Source: %s", rule.Source))
	}

	return strings.Join(parts, " | ")
}
