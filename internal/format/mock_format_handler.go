// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package format

import (
	"github.com/charmbracelet/huh"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// GetDescription provides a mock function for the type MockHandler
func (_mock *MockHandler) GetDescription() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDescription")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockHandler_GetDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDescription'
type MockHandler_GetDescription_Call struct {
	*mock.Call
}

// GetDescription is a helper method to define mock.On call
func (_e *MockHandler_Expecter) GetDescription() *MockHandler_GetDescription_Call {
	return &MockHandler_GetDescription_Call{Call: _e.mock.On("GetDescription")}
}

func (_c *MockHandler_GetDescription_Call) Run(run func()) *MockHandler_GetDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHandler_GetDescription_Call) Return(s string) *MockHandler_GetDescription_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockHandler_GetDescription_Call) RunAndReturn(run func() string) *MockHandler_GetDescription_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisplayName provides a mock function for the type MockHandler
func (_mock *MockHandler) GetDisplayName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDisplayName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockHandler_GetDisplayName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisplayName'
type MockHandler_GetDisplayName_Call struct {
	*mock.Call
}

// GetDisplayName is a helper method to define mock.On call
func (_e *MockHandler_Expecter) GetDisplayName() *MockHandler_GetDisplayName_Call {
	return &MockHandler_GetDisplayName_Call{Call: _e.mock.On("GetDisplayName")}
}

func (_c *MockHandler_GetDisplayName_Call) Run(run func()) *MockHandler_GetDisplayName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHandler_GetDisplayName_Call) Return(s string) *MockHandler_GetDisplayName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockHandler_GetDisplayName_Call) RunAndReturn(run func() string) *MockHandler_GetDisplayName_Call {
	_c.Call.Return(run)
	return _c
}

// GetUIOption provides a mock function for the type MockHandler
func (_mock *MockHandler) GetUIOption(selected bool) huh.Option[string] {
	ret := _mock.Called(selected)

	if len(ret) == 0 {
		panic("no return value specified for GetUIOption")
	}

	var r0 huh.Option[string]
	if returnFunc, ok := ret.Get(0).(func(bool) huh.Option[string]); ok {
		r0 = returnFunc(selected)
	} else {
		r0 = ret.Get(0).(huh.Option[string])
	}
	return r0
}

// MockHandler_GetUIOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUIOption'
type MockHandler_GetUIOption_Call struct {
	*mock.Call
}

// GetUIOption is a helper method to define mock.On call
//   - selected bool
func (_e *MockHandler_Expecter) GetUIOption(selected interface{}) *MockHandler_GetUIOption_Call {
	return &MockHandler_GetUIOption_Call{Call: _e.mock.On("GetUIOption", selected)}
}

func (_c *MockHandler_GetUIOption_Call) Run(run func(selected bool)) *MockHandler_GetUIOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 bool
		if args[0] != nil {
			arg0 = args[0].(bool)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHandler_GetUIOption_Call) Return(option huh.Option[string]) *MockHandler_GetUIOption_Call {
	_c.Call.Return(option)
	return _c
}

func (_c *MockHandler_GetUIOption_Call) RunAndReturn(run func(selected bool) huh.Option[string]) *MockHandler_GetUIOption_Call {
	_c.Call.Return(run)
	return _c
}
